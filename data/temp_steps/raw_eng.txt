['This article is an attempt to explain the principles of solid by using the example of the java psevod.', 'The article will be useful for beginners to understand these design principles.', 'First, consider the general concept of what is solid and how each letter of the acronym is deciphered.', 'Solid is the software development principles that will give you a good code that will then be well scaled up and maintained in working order.', 'S is the principle of sole responsibility.', 'Each class should have only one area of responsibility.', 'O – open-closed principle.', 'Classes should be open to expansion but closed to change.', 'L - liskov substitution principle is the principle of setting up a fox barn.', 'It should be possible to frame any sub-type of the parent type instead of the parent type (class), without changing the work of the programme.', 'I - interface segregation principle.', 'This principle means that there is no need to force a customer (class) to implement an interface that is not related to it.', 'D - dependency inversion principle is the principle of inversion of dependence.', 'Top level modules should not be dependent on lower level modules.', 'Both must depend on abstraction.', 'Abstractions should not be subject to detail.', 'The details must depend on abstraction.', 'Consider the first principle - the principle of sole responsibility by example.', "Let's say we have a class of reentcarservice and it has several methods: find a car by number, book a car, print an order, get information about the car, send a message.", 'This class has several areas of responsibility, which is a violation of the first principle.', 'Take the method of obtaining information about the machine.', 'Now we only have three types of sedan, pickup and van, but if the customer wants to add a few more types, then we have to change and complete this method.', 'Or take the method of sending the message.', 'If, in addition to sending a message by e-mail, a text message is to be added, this method will also have to be changed.', 'In a word, this class violates the principle of common responsibility because it is responsible for different actions.', 'It is necessary to divide this class of reentcarservice into more than one, and thus, in accordance with the principle of common responsibility, to give each class responsibility for only one zone or action, so that in the future it will be easier to complement and modify.', 'There is a need to create a private-service class and to take out a printing function.', 'Similar work related to searching for car information to transfer to carinfoservice mode of sending messages to notificationservice class.', 'The principle of openness-closedness is illustrated by the newly created message class.']